#include "Graph.h"

int Graph::getnum()
{
	return numEdges;
}

creat* Graph::getc()
{
	return &c;
}


/*Graph::Graph(ArrayGraph m){
	int i, j=0;
	for (i = 0; i < 30; i++) {
		if (i = j) {
			m.arcArr[i][j] = 0;
		}
		else {
			m.arcArr[i][j] = infinity;
		}
	}
	numEdges = 0;
}*/


Graph::Graph()
{
	numEdges = c.getGraph()->getsize();
}

void Graph::dijkstra(int v0){
	int n = c.getGraph()->getsize();
	int s[200]; //判断顶点是否已被连接的数组
	int path[200];
	int minDis, i, j, u=0;
	int distance[200];

	for (i = 0; i < n; i++) {
		distance[i] = c.getGraph()->arcArr[v0-1][i];
		s[i] = 0;
		if (i != v0-1 && distance[i] < infinity)
			path[i] = v0-1;
		else
			path[i] = -1;
	}
	s[v0-1] = 1;
	//在当前还未找到最短路径的顶点集中选取最短距离的顶点

	for (int o = 1; o < n; o++) {
		minDis = infinity;
		for (j = 0; j < n; j++) {
			if (s[j] == 0 && distance[j] < minDis) {
				u = j;
				minDis = distance[j];
			}
			s[u] = 1;
			for (int x = 0; x < n; x++) {
				if (s[x] == 0 && c.getGraph()->arcArr[u][x] < infinity && (distance[u] + c.getGraph()->arcArr[u][x]) < distance[x]) {
					distance[x] = distance[u] + c.getGraph()->arcArr[u][x];
					path[x] = u;
					s[x] = 1;
				}
			}
		}
	}
	
	j = 0;
	i = 0;
	cout << "目的路由器  下一跳路由器  距离" << endl;
	for (; i < n; i++) {
		if (i == v0-1)
			i++;
		j = i;
		while (path[j] != v0-1) {
			j = path[j];
			if (j == -1)
				break;
		}
		cout << i+1 << "  " << j+1 <<"  "<<distance[i]<< endl;
	}
}






